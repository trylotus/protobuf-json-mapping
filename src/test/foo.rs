// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `test/foo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

// @@protoc_insertion_point(message:test.Foo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Foo {
    // message fields
    // @@protoc_insertion_point(field:test.Foo.hex)
    pub hex: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:test.Foo.base64)
    pub base64: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:test.Foo.bar)
    pub bar: ::protobuf::MessageField<Bar>,
    // special fields
    // @@protoc_insertion_point(special_field:test.Foo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Foo {
    fn default() -> &'a Foo {
        <Foo as ::protobuf::Message>::default_instance()
    }
}

impl Foo {
    pub fn new() -> Foo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hex",
            |m: &Foo| { &m.hex },
            |m: &mut Foo| { &mut m.hex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "base64",
            |m: &Foo| { &m.base64 },
            |m: &mut Foo| { &mut m.base64 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Bar>(
            "bar",
            |m: &Foo| { &m.bar },
            |m: &mut Foo| { &mut m.bar },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Foo>(
            "Foo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Foo {
    const NAME: &'static str = "Foo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hex = is.read_bytes()?;
                },
                18 => {
                    self.base64 = is.read_bytes()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.bar)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hex.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hex);
        }
        if !self.base64.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.base64);
        }
        if let Some(v) = self.bar.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hex.is_empty() {
            os.write_bytes(1, &self.hex)?;
        }
        if !self.base64.is_empty() {
            os.write_bytes(2, &self.base64)?;
        }
        if let Some(v) = self.bar.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Foo {
        Foo::new()
    }

    fn clear(&mut self) {
        self.hex.clear();
        self.base64.clear();
        self.bar.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Foo {
        static instance: Foo = Foo {
            hex: ::std::vec::Vec::new(),
            base64: ::std::vec::Vec::new(),
            bar: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Foo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Foo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Foo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Foo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:test.Bar)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Bar {
    // message fields
    // @@protoc_insertion_point(field:test.Bar.hex)
    pub hex: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:test.Bar.base64)
    pub base64: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:test.Bar.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Bar {
    fn default() -> &'a Bar {
        <Bar as ::protobuf::Message>::default_instance()
    }
}

impl Bar {
    pub fn new() -> Bar {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "hex",
            |m: &Bar| { &m.hex },
            |m: &mut Bar| { &mut m.hex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "base64",
            |m: &Bar| { &m.base64 },
            |m: &mut Bar| { &mut m.base64 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Bar>(
            "Bar",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Bar {
    const NAME: &'static str = "Bar";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hex.push(is.read_bytes()?);
                },
                18 => {
                    self.base64.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.hex {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in &self.base64 {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.hex {
            os.write_bytes(1, &v)?;
        };
        for v in &self.base64 {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Bar {
        Bar::new()
    }

    fn clear(&mut self) {
        self.hex.clear();
        self.base64.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Bar {
        static instance: Bar = Bar {
            hex: ::std::vec::Vec::new(),
            base64: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Bar {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Bar").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Bar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Bar {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0etest/foo.proto\x12\x04test\x1a\x11lotus/lotus.proto\"Z\n\x03Foo\
    \x12\x18\n\x03hex\x18\x01\x20\x01(\x0cR\x03hexB\x06\xd2\xab0\x02\x08\x01\
    \x12\x1c\n\x06base64\x18\x02\x20\x01(\x0cR\x06base64B\x04\xd2\xab0\0\x12\
    \x1b\n\x03bar\x18\x03\x20\x01(\x0b2\t.test.BarR\x03bar\"=\n\x03Bar\x12\
    \x18\n\x03hex\x18\x01\x20\x03(\x0cR\x03hexB\x06\xd2\xab0\x02\x08\x01\x12\
    \x1c\n\x06base64\x18\x02\x20\x03(\x0cR\x06base64B\x04\xd2\xab0\0J\x86\
    \x04\n\x06\x12\x04\0\0\x0f\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\0\r\n\t\n\x02\x03\0\x12\x03\x04\0\x1b\n\n\n\x02\x04\
    \0\x12\x04\x06\0\n\x01\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\x0b\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x07\x029\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x07\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x08\x0b\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x07\x0e\x0f\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\
    \x07\x108\n\x10\n\t\x04\0\x02\0\x08\xba\x85\x06\x01\x12\x03\x07\x117\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x08\x02?\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x08\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x08\x08\x0e\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x08\x11\x12\n\x0c\n\x05\x04\0\x02\
    \x01\x08\x12\x03\x08\x13>\n\x10\n\t\x04\0\x02\x01\x08\xba\x85\x06\x01\
    \x12\x03\x08\x14=\n\x0b\n\x04\x04\0\x02\x02\x12\x03\t\x02\x0e\n\x0c\n\
    \x05\x04\0\x02\x02\x06\x12\x03\t\x02\x05\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\t\x06\t\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\t\x0c\r\n\n\n\x02\
    \x04\x01\x12\x04\x0c\0\x0f\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0c\x08\x0b\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\r\x02B\n\x0c\n\x05\x04\x01\x02\0\x04\
    \x12\x03\r\x02\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\r\x0b\x10\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\r\x11\x14\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\r\x17\x18\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03\r\x19A\n\x10\n\
    \t\x04\x01\x02\0\x08\xba\x85\x06\x01\x12\x03\r\x1a@\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\x0e\x02H\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x0e\
    \x02\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0e\x0b\x10\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x03\x0e\x11\x17\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03\x0e\x1a\x1b\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\x03\x0e\x1cG\n\
    \x10\n\t\x04\x01\x02\x01\x08\xba\x85\x06\x01\x12\x03\x0e\x1dFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::lotus::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Foo::generated_message_descriptor_data());
            messages.push(Bar::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
